{"version":3,"sources":["components/contactList.js","utilities/modal.js","components/common/hoc/withActions.js","components/common/textbox.js","components/common/textArea.js","components/addContact.js","container/contacts.js","App.js","serviceWorker.js","index.js"],"names":["getKeys","props","Object","keys","data","ContactHeader","objectSpread","map","key","index","react_default","a","createElement","toUpperCase","ContactRows","contacts","row","contactList_ContactRow","rowIndex","ContactRow","ContactList","className","contactList_ContactHeader","contactList_ContactRows","ModalCmp","_ref","show","modalTitle","children","handleClose","type","data-dismiss","onClick","defaultProps","withActions","NestedControl","_React$Component","childControl","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","value","labelClass","isRequired","Fragment","displayName","isValid","name","id","validationMessage","React","Component","textbox","handleInputChange","classname","placeholder","validationExpression","onChange","validationexpression","iseequired","toString","textArea","rows","columns","isrequired","AddContact","handleOnSubmit","handleCancel","ContactDetails","validationResult","common_textbox","Validations","alphabetsWithSpace","alphaNumericWithSpaceAndHyphen","address","indiaPhoneNumber","phone","email","common_textArea","allowAny","notes","e","Contacts","_this","call","showAddContact","event","setState","contactDetails","areContactDetailsValid","isInputValid","closeAddContact","preventDefault","control","isValidInput","getAttribute","regex","replace","match","state","defineProperty","getValidationExpression","obj","validConfig","validationConfig","expression","forEach","isModelValid","validationObject","modelObject","model","trim","length","addContact","contactData","push","target","_this2","style","marginTop","modal","contactList","App","contacts_Contacts","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0c86be49.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst getKeys = (props) => {\r\n    return Object.keys(props.data[0]);\r\n}\r\nconst ContactHeader = (props) => {\r\n    var keys = getKeys({ ...props });\r\n    return keys.map((key, index) => {\r\n        return <th key={index}>{key.toUpperCase()}</th>\r\n    })\r\n}\r\n\r\nconst ContactRows = (props) => {\r\n    var keys = getKeys({ ...props });\r\n    var contacts = props.data;\r\n    return contacts.map((row, index) => {\r\n        return <tr key={index}>\r\n            <ContactRow rowIndex={index} data={contacts} keys={keys}></ContactRow>\r\n        </tr>\r\n    })\r\n}\r\n\r\nconst ContactRow = (props) => {\r\n    return props.keys.map((key, index) => {\r\n        return <td key={index}>{props.data[props.rowIndex][key]}</td>\r\n    })\r\n}\r\n\r\nconst ContactList = (props) => {\r\n    return (\r\n        <table className=\"table table-bordered table-striped table-hover\">\r\n            <thead>\r\n                <tr>\r\n                    <ContactHeader {...props}></ContactHeader>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <ContactRows {...props}></ContactRows>\r\n            </tbody>\r\n        </table>\r\n    );\r\n}\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport './../../src/App.css'\r\nconst ModalCmp = ({ show, modalTitle, children, handleClose }) => {\r\n\tif (!show) return <span />;\r\n\treturn (\r\n\t\t<div className=\"c-modal\">\r\n\t\t\t<div className=\"c-modal1\">\r\n\t\t\t\t<div className=\"modal-content1\">\r\n\t\t\t\t\t<div className=\"cmodal-header\">\r\n\t\t\t\t\t\t<button type=\"button\" className=\"close\" data-dismiss=\"modal\" onClick={handleClose}>&times;</button>\r\n\t\t\t\t\t\t<h4 className=\"cmodal-title\">{modalTitle}</h4>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"cmodal-body\">\r\n\t\t\t\t\t\t{children}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"cmodal-footer\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nModalCmp.defaultProps = {\r\n\tshow: false,\r\n\tmodalTitle: 'Add New Contact',\r\n\tchildren: 'nothing to show',\r\n\thandleClose: () => {\r\n\t\t// handleChange default function here\r\n\t}\r\n}\r\nexport default ModalCmp;","import React from 'react';\r\n\r\nexport const withActions = NestedControl => {\r\n    class childControl extends React.Component {\r\n        render() {\r\n            const labelClass = this.props.isRequired ? \"required\" : \"\"\r\n            return (\r\n                <React.Fragment>\r\n                    <div className={labelClass}><label className=\"control-label col-sm-2\">{this.props.displayName}</label></div>\r\n                    <div className=\"col-sm-10\">\r\n                        <NestedControl {...this.props}></NestedControl>\r\n                    </div>\r\n                    {this.props.isValid[this.props.name] ? null : (<p>\r\n                        <small id=\"nameError\" className=\"text-danger\">{this.props.validationMessage}</small>\r\n                    </p>)}\r\n                </React.Fragment>\r\n            );\r\n        }\r\n    }\r\n    return childControl;\r\n}","import React from 'react';\r\nimport { withActions } from './hoc/withActions';\r\n\r\nconst textbox = ({ name, value, handleInputChange, classname, placeholder, isRequired, isValid, validationMessage,validationExpression }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <input type=\"text\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                className={classname} name={name}\r\n                id={name} placeholder={placeholder}\r\n                validationexpression={validationExpression}\r\n                iseequired={isRequired.toString()}\r\n            />            \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\ntextbox.defaultProps={\r\n    name:'test',\r\n    value:'', \r\n    handleInputChange:() => {}, \r\n    classname:'', \r\n    placeholder:'props not initialised', \r\n    isRequired:false, \r\n    isValid:true, \r\n    validationMessage:'', \r\n    validationExpression:'' \r\n}\r\n\r\nexport default withActions(textbox);","import React from 'react';\r\nimport { withActions } from './hoc/withActions';\r\n\r\nconst textArea = ({ name, value, handleInputChange, classname, placeholder, isRequired, isValid, validationMessage, rows, columns,validationExpression }) => {\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <textarea\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                className={classname} name={name}\r\n                id={name} placeholder={placeholder}\r\n                rows={rows}\r\n                columns={columns}\r\n                validationexpression={validationExpression}\r\n                isrequired={isRequired.toString()}\r\n            />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\ntextArea.defaultProps={\r\n    name:'test',\r\n    value:'', \r\n    handleInputChange:() => {}, \r\n    classname:'', \r\n    placeholder:'props not initialised', \r\n    isRequired:false, \r\n    isValid:true, \r\n    validationMessage:'', \r\n    rows:10, \r\n    columns:10,\r\n    validationExpression:'' \r\n}\r\n\r\nexport default withActions(textArea);","import React from 'react';\r\nimport Textbox from './common/textbox';\r\nimport TextArea from './common/textArea';\r\nimport Validations from './../config/validations.json';\r\n\r\nconst AddContact = ({ handleOnSubmit, handleCancel, ContactDetails, handleInputChange, validationResult }) => {\r\n    return (\r\n        <form className=\"form-horizontal\">\r\n            <div className=\"form-group\">\r\n                <Textbox isRequired={true}\r\n                    validationExpression={Validations.alphabetsWithSpace}\r\n                    classname=\"form-control\"\r\n                    value={ContactDetails.name}\r\n                    name=\"name\"\r\n                    displayName=\"Name\"\r\n                    placeholder=\"Name\"\r\n                    handleInputChange={handleInputChange}\r\n                    isValid={validationResult}\r\n                    validationMessage=\"Please enter your Name.\" />\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <Textbox classname=\"form-control\"\r\n                    name=\"address\"\r\n                    isRequired={false}\r\n                    validationExpression={Validations.alphaNumericWithSpaceAndHyphen}\r\n                    displayName=\"Address\"\r\n                    placeholder=\"Address\"\r\n                    value={ContactDetails.address}\r\n                    handleInputChange={handleInputChange}\r\n                    isValid={validationResult}\r\n                    validationMessage=\"Address can contain characters and numbers only.\" />\r\n            </div>\r\n\r\n\r\n            <div className=\"form-group\">\r\n                <Textbox classname=\"form-control\"\r\n                    isRequired={false}\r\n                    validationExpression={Validations.indiaPhoneNumber}\r\n                    name=\"phone\"\r\n                    displayName=\"Phone\"\r\n                    placeholder=\"Phone (india Fixed or Mobile)\"\r\n                    value={ContactDetails.phone}\r\n                    handleInputChange={handleInputChange}\r\n                    isValid={validationResult}\r\n                    validationMessage=\"Please enter valid India Phone Number\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n                <Textbox classname=\"form-control\"\r\n                    isRequired={true}\r\n                    validationExpression={Validations.email}\r\n                    name=\"email\"\r\n                    displayName=\"Email\"\r\n                    placeholder=\"Email address\"\r\n                    value={ContactDetails.email}\r\n                    handleInputChange={handleInputChange}\r\n                    isValid={validationResult}\r\n                    validationMessage=\"Please enter valid email address\" />\r\n\r\n            </div>\r\n\r\n            <div className=\"form-group\">\r\n                <TextArea classname=\"form-control\"\r\n                    isRequired={false}\r\n                    validationExpression={Validations.allowAny}\r\n                    name=\"notes\"\r\n                    displayName=\"Notes\"\r\n                    placeholder=\"Type Notes\"\r\n                    value={ContactDetails.notes}\r\n                    handleInputChange={handleInputChange}\r\n                    isValid={validationResult}\r\n                    validationMessage=\"Please enter valid notes\"\r\n                    rows={4}\r\n                    columns={30} />\r\n            </div>\r\n\r\n            <div className=\"button-modal\">\r\n            <button className=\"btn btn-secondary\" onClick={(e) => { handleCancel(e) }}>Cancel</button>&nbsp;\r\n            <button className=\"btn btn-primary\" onClick={(e) => { handleOnSubmit(e) }}>Add Contact</button>\r\n            </div>\r\n\r\n        </form>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default AddContact;","import React from 'react';\r\nimport contactData from './../data.json';\r\nimport ContactList from './../components/contactList'\r\nimport Modal from './../utilities/modal';\r\nimport AddContact from './../components/addContact';\r\nimport './../../src/App.css';\r\nimport model from './../model.json';\r\nimport validationConfig from './../config/validations.json';\r\n\r\nexport default class Contacts extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            contactData: contactData,\r\n            showAddContact: false,\r\n            contactDetails: {\r\n                name: '',\r\n                address: '',\r\n                phone: '',\r\n                email: '',\r\n                notes: ''\r\n            },\r\n            areContactDetailsValid: {\r\n                name: true,\r\n                address: true,\r\n                phone: true,\r\n                email: true,\r\n                notes: true\r\n            }\r\n        }\r\n    }\r\n\r\n    showAddContact = (event) => {\r\n        this.setState({\r\n            showAddContact: true,\r\n            contactDetails: {\r\n                name: '',\r\n                address: '',\r\n                phone: '',\r\n                email: '',\r\n                notes: ''\r\n            },\r\n            areContactDetailsValid: {\r\n                name: true,\r\n                address: true,\r\n                phone: true,\r\n                email: true,\r\n                notes: true\r\n            },\r\n            isInputValid: false\r\n        });\r\n\r\n    }\r\n\r\n\r\n\r\n    closeAddContact = (event) => {\r\n        this.setState({ showAddContact: false });\r\n        event.preventDefault();\r\n    }\r\n\r\n    isValid = (control) => {\r\n        let isValidInput = false;\r\n        if (control.getAttribute(\"iseequired\") && !control.value)\r\n            isValidInput = false;\r\n        else\r\n            isValidInput = true;\r\n\r\n        if (isValidInput) {\r\n            let regex = control.getAttribute(\"validationexpression\");\r\n            regex = regex.replace(/\\\\\\\\/g, '\\\\');\r\n            if (control.value.match(regex)) {\r\n                isValidInput = true;\r\n            }\r\n            else {\r\n                isValidInput = false;\r\n            }\r\n        }\r\n\r\n        this.setState(() => ({\r\n            areContactDetailsValid: {\r\n                ...this.state.areContactDetailsValid,\r\n                [control.name]: isValidInput\r\n            }\r\n        }))\r\n    }\r\n\r\n    getValidationExpression = (obj) => {\r\n        let validConfig=validationConfig;\r\n        let expression='.';\r\n        Object.keys(obj).forEach(key => {\r\n            if (key === 'validation') {\r\n                expression= validConfig[obj[key]];\r\n            }\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    isModelValid = () => {\r\n        let isInputValid = false;\r\n        let regex = '';\r\n        let validationObject=this.state.areContactDetailsValid;\r\n        let modelObject=model;\r\n        Object.keys(model).forEach(key => {\r\n            regex = this.getValidationExpression(modelObject[key]);\r\n            regex = regex.replace('//', '/');\r\n            if (this.state.contactDetails[key].trim().length>0 && this.state.contactDetails[key].match(regex)) {\r\n                isInputValid = true;\r\n            }\r\n            else {\r\n                isInputValid = false;\r\n            }\r\n            validationObject[key]=isInputValid;\r\n        })\r\n\r\n        this.setState(() => ({\r\n            areContactDetailsValid:validationObject\r\n        }))\r\n\r\n        return isInputValid;\r\n    }\r\n\r\n    addContact = (event) => {\r\n        let data = this.state.contactData;\r\n        if (this.isModelValid()) {\r\n            data.push({\r\n                'name': this.state.contactDetails.name,\r\n                'address': this.state.contactDetails.address,\r\n                'phone': this.state.contactDetails.phone,\r\n                'email': this.state.contactDetails.email,\r\n                'notes': this.state.contactDetails.notes\r\n            });\r\n            this.setState({ contactData: data });\r\n\r\n            this.closeAddContact(event);\r\n        }\r\n        event.preventDefault();\r\n\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const contactDetails = { ...this.state.contactDetails };\r\n        this.setState({\r\n            contactDetails: {\r\n                ...contactDetails,\r\n                [event.target.name]: event.target.value\r\n            }\r\n        });\r\n        this.isValid(event.target);\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container\" style={{ marginTop: 50 }}>\r\n                <button type=\"button\" className=\"btn btn-info btn-lg add-contact-button\" onClick={() => this.showAddContact()}>Add New Contact</button>\r\n                <Modal show={this.state.showAddContact} handleClose={this.closeAddContact}>\r\n                    <AddContact\r\n                        handleCancel={this.closeAddContact}\r\n                        handleOnSubmit={this.addContact}\r\n                        ContactDetails={this.state.contactDetails}\r\n                        handleInputChange={this.handleInputChange}\r\n                        validationResult={this.state.areContactDetailsValid}>\r\n                    </AddContact></Modal>\r\n                <ContactList data={this.state.contactData}></ContactList>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\n// import 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport Contacts from './container/contacts';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Contacts></Contacts>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}